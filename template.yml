AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'Stage'
    AllowedValues:
      - 'Stage'
      - 'Prod'

  MasterModelTable:
    Type: String
    Default: 'model_maker'
  MasterRailwayCompanyTable:
    Type: String
    Default: 'railway_company'

Mappings:
   EnvironmentDiff:
    AliasName:
      Stage: $LATEST
      Prod: live
    DeploymentPreferenceEnabled:
      Stage: false
      Prod: true

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: "'www.shirley-depot.com'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  FetchMaster:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-fetch_master_data'
      CodeUri: ./src/fetch_master_data/
      Runtime: python3.8
      Handler: main.lambda_handler
      Layers:
        - !Ref ApiResponser
      Role:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MasterModelTable
        - DynamoDBReadPolicy:
            TableName: !Ref MasterRailwayCompanyTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /master
            Method: get
            RestApiId: !Ref ApiGateway
            Auth:

  GetTrain:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-get_trains'
      CodeUri: ./src/get_trains/
      Runtime: python3.8
      Handler: main.lambda_handler
      Layers:
        - !Ref ApiResponser
      Role:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref depot
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /train
            Method: get

  PostTrain:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-regist_train'
      CodeUri: ./src/regist_train/
      Runtime: python3.8
      Handler: main.lambda_handler
      Layers:
        - !Ref ApiResponser
      Role:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref depot
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /train
            Method: post

  PutTrain:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-update_train'
      CodeUri: ./src/update_train/
      Runtime: python3.8
      Handler: main.lambda_handler
      Layers:
        - !Ref ApiResponser
      Role:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref depot
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /train
            Method: put

  ApiResponser:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      ContentUri: Layer/api_responser
      LayerName: API-Responser

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${Stage}-Shirley'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
  UserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${Stage}-Shirley-client'
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      GenerateSecret: false
      UserPoolId: !Ref UserPool